{
  "hash": "2bcb94bdd7c407dc73d7ead1bd5245a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R para Dummies en Fitopatología\"\n---\n\n\n## Descubriendo el mundo del análisis de datos en R\n\n![Análisis de datos usando Quarto en R](img/quarto_schematic.png)\n\nAl entrar en el fascinante mundo del análisis de datos con RStudio, es importante saber por dónde empezar. Existen muchos materiales interesantes y extremadamente útiles disponibles, solo necesitas acceder a ellos y saber cómo usar la información a tu favor. Entre los materiales disponibles, libros como [Introducción a la Ciencia de Datos en R](https://r4ds.hadley.nz/), [Introduction to R](https://intro2r.com/) y [The Art of Data Science](https://bookdown.org/rdpeng/artofdatascience/) son esenciales para obtener una comprensión básica de la ciencia de datos y un entendimiento más profundo de cómo realizar exploración y análisis de datos correctamente en R.\n\nEs importante resaltar que los materiales presentados en este sitio son clases que fueron creadas con el objetivo de agregar conocimiento. Sin embargo, debido a la complejidad de los temas, no fue posible realizar anotaciones detalladas sobre todos los asuntos abordados, por lo tanto, este no debe ser tu punto de partida para el estudio de análisis. Estos materiales, por sí solos, no son capaces de elucidar cuestiones complejas del R, por eso es importante no enfocarse únicamente en este contenido. Así, comenzamos nuestra jornada de conocimiento en R presentando algunos de sus objetos y funciones más básicos.\n\n## Objetos y funciones\n\n**Objeto**: Un objeto es simplemente un nombre que guarda un valor y, para crearlo, utilizamos el operador `<-`. Ej.: `a <- 1`. En R, una base de datos es representada por objetos llamados data frames. Siempre que se ejecuta una función, el código que guarda será ejecutado y un resultado nos será devuelto. Entre paréntesis, después del nombre de la función, tenemos lo que llamamos *argumentos*. Una función puede tener cualquier número de argumentos y ellos siempre están separados por comas. Ej.: `sum(1, 2)`. La función `sum()` recibió los argumentos `1` y `2`.\n\n**Clases**: Para crear texto en R, colocamos los caracteres entre comillas (\" \"). Las comillas sirven para diferenciar nombres (objetos, funciones, paquetes) de textos (letras y palabras). Los textos son muy comunes en variables categóricas. Las clases más básicas dentro de R son: `numeric`, `character` y `logical`.\n\n**Vectores**: Los vectores en R son solo conjuntos indexados de valores. Para crearlos, solo necesitas poner los valores separados por comas dentro de un `c()`. Cada columna de un data frame será representada como un vector. Ej.: `vector1 <- c(1, 5, 3, -10)`. Una manera fácil de crear un vector con una secuencia de números es utilizar el operador `:`.\n\n**Testes lógicos**: Una operación lógica no es más que un test que retorna verdadero o falso. El verdadero en R será representado por el valor `TRUE` y el falso por el valor `FALSE`. Estos nombres en R son reservados, es decir, no puedes llamar a ningún objeto `TRUE` o `FALSE`. Ej.: para testar si un valor es igual a otro (operador `==`) - `1 == 1` \\[TRUE\\] o `1 == 2` \\[FALSE\\]. Algunos de los principales operadores lógicos son:\n\n-   `x < y` (¿x menor que y?)\n-   `x <= y` (¿x menor o igual a y?)\n-   `x > y` (¿x mayor que y?)\n-   `x >= y` (¿x mayor o igual a y?)\n-   `x == y` (¿x igual a y?)\n-   `x != y` (¿x diferente de y?)\n-   `!x` (Negación de x)\n-   `x | y` (¿x o y son verdaderos?)\n-   `x & y` (¿x y y son verdaderos?)\n-   `x %in% y` (¿x pertenece a y?)\n-   `xor(x, y)` (¿x o y son verdaderos, pero no ambos?)\n\n**Valores especiales**: `NA` - representa la ausencia de información, es decir, la información existe, pero nosotros (y R) no sabemos cuál es. El `NA` para R no es más que el valor faltante o omitido de la Estadística.\n\n**Operador pipe**: La idea del operador `%>%` (pipe) es muy simple: usar el valor resultante de la expresión del lado izquierdo como primer argumento de la función del lado derecho. Se usa el pipe (`|>` o `%>%`) para enfatizar una secuencia de comandos o acciones en el chunk y para evitar agregar el nombre del data frame dentro de la función `ggplot`. El pipe debe tener siempre un espacio antes de él y, generalmente, debe ser seguido por una nueva línea. Después de la primera etapa, cada línea debe tener dos espacios, lo que facilita agregar otras etapas o reorganizar las ya existentes.\n\n**Operador cifrón**: Usar el comando cifrón permite acceder a columnas por el nombre. El uso es básicamente el siguiente - `datos$cifra`, donde `datos` especifica el conjunto de datos y `cifra` la variable que deseas extraer. Por ejemplo, para extraer los datos de macacos usa: `macac$macacos`.\n\n## Ejemplo Práctico\n\nVamos a usar un ejemplo práctico para aplicar lo que hemos aprendido.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalación y carga de paquetes\n#install.packages(\"ggplot2\")  # Instala el paquete ggplot2 para visualización de datos\nlibrary(ggplot2)             # Carga el paquete ggplot2\n\n# Creación de un data frame\ndata <- data.frame(\n  x = c(1, 2, 3, 4, 5),\n  y = c(2, 4, 6, 8, 10)\n)\n\n# Creación de un gráfico de puntos\nggplot(data, aes(x = x, y = y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Aula1_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n### Librerías Usadas\n\n-   **ggplot2**: Esta librería es parte del `tidyverse` y se utiliza para crear gráficos de alta calidad y altamente personalizables. Facilita la creación de una amplia variedad de gráficos, desde gráficos de dispersión hasta gráficos de barras, utilizando una gramática de gráficos coherente.\n\n## Aprendizaje del día\n\nEsta guía cubre los fundamentos básicos de R. Con práctica y exploración, te familiarizarás más con el lenguaje y sus capacidades. ¡Buena suerte en tu viaje de aprendizaje con R!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}